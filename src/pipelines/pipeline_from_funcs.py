import os
from pathlib import Path

from clearml import PipelineController
import pandas as pd

from common.exceptions import PipelineExecutionError
from common.pipeline_steps import (
    PREPROCESS,
    FEATURE_ENGINEER,
)
from features import FeatureEngineerPipelineStep
from preprocess import PreprocessPipelineStep
from settings import Settings
from utilities.loaders import CsvLoader


settings = Settings()


def run_preprocess_step(settings: 'Settings') -> pd.DataFrame:
    data_path = Path(os.path.join(settings.storage.raw_folder, "data.csv"))
    target_path = Path(os.path.join(settings.storage.raw_folder, "target_train.csv"))
    data = CsvLoader(path=data_path).load()
    target = CsvLoader(path=target_path).load()

    preprocessor = PreprocessPipelineStep(settings=settings)
    return preprocessor.start(data=data, target=target)


def run_feature_engineer_step(
    settings: 'Settings',
    data: pd.DataFrame,
) -> pd.DataFrame:
    """Runs the feature engineering step with the given settings and input data.

    Args:
        settings (Settings): The settings object containing configuration settings.
        data (pd.DataFrame): The input data for feature engineering.

    Returns:
        pd.DataFrame: The output features generated by the feature engineering step.
    """

    if data.empty:
        raise PipelineExecutionError("Data is empty")
    else:
        fe = FeatureEngineerPipelineStep(settings=settings)
        return fe.start(data=data)


if __name__ == '__main__':

    pipe = PipelineController(
        name=f'{settings.clearml.project} tasks pipeline',
        project=settings.clearml.project,
        version='0.0.1',
        add_pipeline_tags=False,
        # retry_on_failure=3,
        auto_version_bump=True,
    )

    pipe.add_function_step(
        name=PREPROCESS.name,
        task_type=PREPROCESS.task_type,
        function=run_preprocess_step,
        function_kwargs=dict(settings=settings),
        function_return=['preprocessed_data'],
        cache_executed_step=True,
        # retry_on_failure=2,

    )
    pipe.add_function_step(
        name=FEATURE_ENGINEER.name,
        task_type=FEATURE_ENGINEER.task_type,
        parents=[PREPROCESS.name],
        function=run_feature_engineer_step,
        function_kwargs=dict(settings=settings, data='${preprocess.preprocessed_data}'),
        function_return=['features'],
        cache_executed_step=True,
    )

    pipe.set_default_execution_queue(settings.clearml.queue_name)
    if settings.clearml.execute_remotely:
        # Starting the pipeline (in the background)
        pipe.start()
    else:
        # for debugging purposes use local jobs
        pipe.start_locally(run_pipeline_steps_locally=True)

    print("Pipeline successfully finished")
