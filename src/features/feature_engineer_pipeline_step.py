# -*- coding: utf-8 -*-
from typing import TYPE_CHECKING
import warnings

import pandas as pd

from common.exceptions import PipelineExecutionError
from common.pipeline_steps import FEATURE_ENGINEER
from core import BasePipelineStep
from features.feature_engineer import FeatureEngineer

if TYPE_CHECKING:
    from settings import Settings

warnings.simplefilter(action="ignore", category=FutureWarning)


class FeatureEngineerPipelineStep(BasePipelineStep):
    def __init__(
        self,
        settings: 'Settings'
    ):
        self.pipeline_step = FEATURE_ENGINEER
        super().__init__(settings, self.pipeline_step)

    def start(self, data: pd.DataFrame) -> pd.DataFrame:

        fe = FeatureEngineer()
        # Transform data
        try:
            features = fe.transform(data)
            self._log_success_step_execution()
        except Exception as exception:
            self._log_failed_step_execution(exception=exception)
            return exception

        return features


def run_feature_engineer_step(
    settings: 'Settings',
    data: pd.DataFrame,
) -> pd.DataFrame:
    """Runs the feature engineering step with the given settings and input data.

    Args:
        settings (Settings): The settings object containing configuration settings.
        data (pd.DataFrame): The input data for feature engineering.

    Returns:
        pd.DataFrame: The output features generated by the feature engineering step.
    """

    if not data or data.empty:
        raise PipelineExecutionError("Data is empty")
    else:
        fe = FeatureEngineerPipelineStep(settings=settings)
        return fe.start(data=data)
