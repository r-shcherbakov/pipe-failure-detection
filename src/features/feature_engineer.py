# -*- coding: utf-8 -*-
""" Base feature engineer """
import logging
from typing import List

import numpy as np
import pandas as pd
from sklearn import set_config
from sklearn.pipeline import Pipeline, make_pipeline

from core import BaseTransformer
from utilities.transformers import (
    InfValuesTransformer,
    ColumnsTypeTransformer,
    FillNanTransformer,
    Aggregator,
)
from utilities.utils import get_common_timestep

LOGGER = logging.getLogger(__name__)

    
class FeatureEngineer(BaseTransformer):
    
    def fit(self, X, y=None):
        self.prefitted_pipeline = None
        return self
    
    def transform(self, X: pd.DataFrame) -> pd.DataFrame:
        
        if self.copy:
            X = X.copy()
            
        self.initial_columns = X.columns
        self.time_step = get_common_timestep(X)
        
        set_config(transform_output="pandas")
        combined_pipeline = make_pipeline(
            self.preprocessing_pipeline,
            self.custom_pipeline,
        )
        # It's required to start this pipeline to get masks for further transformers
        X = combined_pipeline.fit_transform(X)
        self.output_columns = X.columns
        
        return X
    
    @property
    def preprocessing_pipeline(self) -> 'Pipeline':
        pipeline = [
            ("replace_inf_values", InfValuesTransformer()),
        ]
        return Pipeline(pipeline)
    
    
    @property
    def postprocessing_pipeline(self) -> 'Pipeline':
        pipeline = [
            ("fill_nan", FillNanTransformer()),
        ]
        return Pipeline(pipeline)
    
    @property
    def custom_pipeline(self) -> 'Pipeline':
        pipeline = [
            Aggregator(
                feature_source="some_column",
                window=120,
                shift_size=0,
                agg_func="median",
                feature_name="some_column_median_120_shift_0", 
            ),
        ]
        return make_pipeline(*pipeline)

    @property
    def new_columns(self) -> List[str]:
        r"""Columns which were generated by feature engineer"""
        new_columns = np.setdiff1d(np.unique(self.output_columns), self.initial_columns)
        return new_columns
    